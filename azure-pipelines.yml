# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5ff4616c-2149-4367-b15c-657160107051'
  imageRepository: 'nikitanallamothupipelinesjavascriptdocker'
  containerRegistry: 'nikitacontainer.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'nikitacontainer34a6-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests
    - task: Bash@3
      displayName: Set retention
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        targetType: 'inline'
        script: |
          url="https://dev.azure.com/ninallam/Test retention policies/_apis/build/retention/leases?api-version=6.0-preview.1"
          contentType="Content-Type:Â application/json"
          bearerToken="Authorization: Bearer ${SYSTEM_ACCESSTOKEN}"
          getUrl="${url}&ownerId=ninallam&definitionId=$(System.DefinitionId)&runId=$(Build.BuildId)"
          echo "$bearerToken"
          json=$(curl -X GET "${getUrl}" -H "${bearerToken}")
          echo "$json"
          count=$(echo $json | jq '.count')
          echo "$count"
          if [$count == 1]; then
            echo 'Retention lease already exists'
          else
            echo 'Retention lease does not exist'
            data="[{ \"daysValid\": 15, \"runId\": \"$(Build.BuildId)\" , \"definitionId\": \"$(System.DefinitionId)\", \"ownerId\": \"Nikita Nallamothu\", \"protectPipeline\":true }]"
            echo "$data"
            response=$(curl -X POST "${url}" -H "${contentType}" -H "${bearerToken}" -d "${data}")
            echo "$response"
          fi


